# Generated by Django 3.2.23 on 2024-01-24 21:10

from copy import deepcopy
from django.db import migrations, models


def get_value_for_key(data, search_key, keys_array=[]):
    if data is not None:
        for key, value in data.items():
            if key == search_key:
                return value, keys_array
            return get_value_for_key(value, search_key, keys_array)
    return None

def update_dict_for_key(data, search_key, new_value):
    if data is not None:
        for key, value in data.items():
            return {key: new_value if key == search_key else update_dict_for_key(value, search_key, new_value)}
                
        # return get_value_for_key(value, search_key, new_value)
    return None

def update_results_data_schema(apps, schema_editor):
    NimbusExperiment = apps.get_model("experiments", "NimbusExperiment")

    for experiment in NimbusExperiment.objects.all():
        branches = [b.slug for b in experiment.branches.all()]
        reference_branch = (
            experiment.reference_branch if experiment.reference_branch else branches[0]
        )
        data = experiment.results_data
        if data is not None:
            """
            data looks like this (with chnages annotated):
            [window]: {
                [analysis_basis]: {
                    [segment]: {
                        [branch]: {
                            "branch_data": {
                                [metrics_group]: {
                                    [metric_name]: {
                                        "absolute": {
                                            "all": [...],
                                            "first": {...}
                                        },
                                        "difference": {
                                            // "all" and "first" moved from here into [comparison_branch]
                                            [comparison_branch]: { // this level is new
                                                "all": [...],
                                                "first": {...},
                                            },
                                        },
                                        "relative_uplift": {
                                            // "all" and "first" moved from here into [comparison_branch]
                                            [comparison_branch]: { // this level is new
                                                "all": [...],
                                                "first": {...},
                                            },
                                        },
                                        "significance": {
                                            // optional daily/weekly/overall moved from here into [comparison_branch]
                                            [comparison_branch]: { // this level is new
                                                "weekly": {},
                                                "overall: {}
                                            }
                                        }
            """

            

            comparison_default = {"first": {}, "all": []}
            significance_default = {"weekly": {}, "overall": []}
            # comparison_branches = {}
            # significance_branches = {}
            # branch_data_objs = {}
            # for branch in branches:
            #     comparison_branches[branch] = comparison_default
            #     significance_branches[branch] = significance_default
                
            #     branch_data_objs[branch] = get_value_for_key(value, branch)
            #     branch_data_objs[branch]["difference"] = get_value_for_key(branch_data_objs[branch], "difference")
            #     branch_data_objs[branch]["relative_uplift"] = get_value_for_key(branch_data_objs[branch], "relative_uplift")
            #     branch_data_objs[branch]["significance"] = get_value_for_key(branch_data_objs[branch], "significance")

            # for key, value in data.items():
            #     if value is not None and key in ["weekly", "overall"]:
            #         for branch in branches:
                        
                        
            #         data[key] = update_dict_for_key(value, "difference", comparison_branches)
            #         data[key] = update_dict_for_key(value, "relative_uplift", comparison_branches)
            #         data[key] = update_dict_for_key(value, "significance", significance_branches)

                    
                    

            #         branch_data_obj = get_value_for_key(value, "branch_data")
            for key, value in data.items():
                if value is not None and key in ["weekly", "overall"]:
                    for basis, basis_data in value.items():
                        for segment, segment_data in basis_data.items():
                            for cur_branch, branch_data_obj in segment_data.items():
                                branch_data = branch_data_obj["branch_data"]
                                for (
                                    metrics_group,
                                    metrics,
                                ) in branch_data.items():
                                    for metric, metric_data in metrics.items():
                                        for (
                                            comparison,
                                            comparison_data,
                                        ) in metric_data.items():
                                            metric_data_keys = [
                                                k for k in comparison_data.keys()
                                            ]
                                            if not set(branches).issubset(
                                                metric_data_keys
                                            ):
                                                comparison_data_value = deepcopy(comparison_data)
                                                if comparison in [
                                                    "difference",
                                                    "relative_uplift",
                                                ]:
                                                    data[key][basis][segment][cur_branch]["branch_data"][metrics_group][metric][comparison] = {}
                                                    for branch in branches:
                                                        if branch == reference_branch and cur_branch != reference_branch:
                                                            data[key][basis][segment][
                                                                cur_branch
                                                            ]["branch_data"][metrics_group][
                                                                metric
                                                            ][
                                                                comparison
                                                            ][
                                                                reference_branch
                                                            ] = comparison_data_value
                                                        else:
                                                            data[key][basis][segment][
                                                                cur_branch
                                                            ]["branch_data"][metrics_group][
                                                                metric
                                                            ][
                                                                comparison
                                                            ][
                                                                branch
                                                            ] = comparison_default

                                                elif comparison == "significance":
                                                    data[key][basis][segment][cur_branch]["branch_data"][metrics_group][metric][comparison] = {}
                                                    for branch in branches:
                                                        if branch == reference_branch and cur_branch != reference_branch:
                                                            data[key][basis][segment][
                                                                cur_branch
                                                            ]["branch_data"][metrics_group][
                                                                metric
                                                            ][
                                                                comparison
                                                            ][
                                                                reference_branch
                                                            ] = comparison_data_value
                                                        else:
                                                            data[key][basis][segment][
                                                                cur_branch
                                                            ]["branch_data"][metrics_group][
                                                                metric
                                                            ][
                                                                comparison
                                                            ][
                                                                branch
                                                            ] = significance_default
            experiment.results_data = data
            experiment.save()


class Migration(migrations.Migration):

    dependencies = [
        ("experiments", "0260_nimbusexperiment_published_date"),
    ]

    operations = [
        migrations.RunPython(update_results_data_schema),
    ]
